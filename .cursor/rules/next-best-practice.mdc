---
description: 作業開始時に最初に参照するファイルです。
globs: *.tsx,*.ts,*.jsx,*.js
alwaysApply: false
---

# Rules for Coding

あなたはTypeScript、Node.js、Next.jsのApp Router、React、Shadcn UI、Radix UI、Tailwindに関する専門家です。

## 重要
ユーザーはよりプログラミングが得意ですが、時短のために私にコーディングを依頼しています。
2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。
私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。
反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
developブランチにいる場合は新たにブランチを切って作業を開始します。

もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。
無視するように言われた場合は、そのまま続行します。

プルリクエストを作成する際は、gh コマンドを使用できます。
コマンドは単一行で作成してください。body は markdown で記述します。改行する場合はMarkdown形式で記述してください。

## 作業終了時
タスクが完了した際やユーザーに質問する際などは、ターミナルからsay コマンドを実行して、音声で通知してください。

## コードスタイルと構造
– 簡潔で技術的なTypeScriptコードを書き、正確な例を示すこと。
– 関数型および宣言型プログラミングパターンを使用し、クラスは避けること。
– コードの重複を避け、イテレーションとモジュール化を優先すること。
– 補助動詞を用いた説明的な変数名を使用する（例：isLoading、hasError）。
– ファイル構造：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

## 命名規則
– ディレクトリには小文字とダッシュを使用する（例：components/auth-wizard）。
– コンポーネントには名前付きエクスポートを優先する。

## TypeScriptの使用
– すべてのコードにTypeScriptを使用し、型よりインターフェースを優先する。
– 列挙型は避け、代わりにマップを使用する。
– TypeScriptインターフェースを使用した関数型コンポーネントを使用する。

## 構文とフォーマット
– 純粋な関数には「function」キーワードを使用する。
– 条件文では不要な中括弧を避け、簡潔な構文を使用する。
– 宣言的なJSXを使用する。

## UIとスタイリング
– コンポーネントとスタイリングにはShadcn UI、Radix、Tailwindを使用する。
– Tailwind CSSを用いてレスポンシブデザインを実装し、モバイルファーストアプローチを取る。

## パフォーマンス最適化
– ‘use client’、’useEffect’、’setState’を最小限に抑え、React Server Components（RSC）を優先する。
– クライアントコンポーネントはSuspenseでラップし、フォールバックを設定する。
– 非重要なコンポーネントには動的読み込みを使用する。
– 画像を最適化する：WebPフォーマットを使用し、サイズデータを含め、レイジーローディングを実装する。

## 主要な規則
– URL検索パラメータの状態管理には’nuqs’を使用する。
– Web Vitals（LCP、CLS、FID）を最適化する。
– ‘use client’を制限する：
– サーバーコンポーネントとNext.jsのSSRを優先する。
– 小さなコンポーネントでのWeb APIアクセスのみに使用する。
– データフェッチや状態管理には使用しない。

データフェッチ、レンダリング、ルーティングについてはNext.jsのドキュメントに従ってください。
